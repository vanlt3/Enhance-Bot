#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Dashboard th·ªùi gian th·ª±c cho Trading Bot
S·ª≠ d·ª•ng Streamlit ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin giao d·ªãch, v·ªã th·∫ø v√† hi·ªáu su·∫•t
"""

import streamlit as st
import pandas as pd
import numpy as np
import json
import sqlite3
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import time
import os
import sys

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Trading Bot Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .profit-positive {
        color: #00ff00;
        font-weight: bold;
    }
    .profit-negative {
        color: #ff0000;
        font-weight: bold;
    }
    .status-open {
        color: #00ff00;
        font-weight: bold;
    }
    .status-closed {
        color: #ff0000;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

class TradingDashboard:
    """L·ªõp qu·∫£n l√Ω Dashboard Trading Bot"""
    
    def __init__(self):
        self.positions_file = "open_positions_h4.json"
        self.db_file = "trading_bot.db"
        self.feature_store_file = "feature_store.db"
        
    def load_open_positions(self):
        """T·∫£i danh s√°ch v·ªã th·∫ø ƒëang m·ªü"""
        try:
            if os.path.exists(self.positions_file):
                with open(self.positions_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                positions = []
                for symbol, pos in data.items():
                    pos['symbol'] = symbol
                    positions.append(pos)
                
                return pd.DataFrame(positions)
            else:
                return pd.DataFrame()
        except Exception as e:
            st.error(f"L·ªói t·∫£i v·ªã th·∫ø m·ªü: {e}")
            return pd.DataFrame()
    
    def load_trading_history(self):
        """T·∫£i l·ªãch s·ª≠ giao d·ªãch t·ª´ database"""
        try:
            if not os.path.exists(self.db_file):
                return pd.DataFrame()
            
            conn = sqlite3.connect(self.db_file)
            
            # Ki·ªÉm tra xem c√≥ b·∫£ng trades kh√¥ng
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='trades'")
            
            if cursor.fetchone():
                query = """
                SELECT * FROM trades 
                ORDER BY timestamp DESC 
                LIMIT 1000
                """
                df = pd.read_sql_query(query, conn)
            else:
                df = pd.DataFrame()
            
            conn.close()
            return df
            
        except Exception as e:
            st.error(f"L·ªói t·∫£i l·ªãch s·ª≠ giao d·ªãch: {e}")
            return pd.DataFrame()
    
    def load_feature_store_stats(self):
        """T·∫£i th·ªëng k√™ Feature Store"""
        try:
            if not os.path.exists(self.feature_store_file):
                return {}
            
            conn = sqlite3.connect(self.feature_store_file)
            cursor = conn.cursor()
            
            # T·ªïng s·ªë records
            cursor.execute('SELECT COUNT(*) FROM features')
            total_records = cursor.fetchone()[0]
            
            # S·ªë symbols
            cursor.execute('SELECT COUNT(DISTINCT symbol) FROM features')
            total_symbols = cursor.fetchone()[0]
            
            # S·ªë features
            cursor.execute('SELECT COUNT(DISTINCT feature_name) FROM features')
            total_features = cursor.fetchone()[0]
            
            # Th·ªùi gian m·ªõi nh·∫•t
            cursor.execute('SELECT MAX(timestamp) FROM features')
            latest_timestamp = cursor.fetchone()[0]
            
            conn.close()
            
            return {
                'total_records': total_records,
                'total_symbols': total_symbols,
                'total_features': total_features,
                'latest_timestamp': latest_timestamp
            }
            
        except Exception as e:
            st.error(f"L·ªói t·∫£i th·ªëng k√™ Feature Store: {e}")
            return {}
    
    def calculate_position_metrics(self, positions_df):
        """T√≠nh to√°n c√°c ch·ªâ s·ªë v·ªã th·∫ø"""
        if positions_df.empty:
            return {
                'total_positions': 0,
                'total_pnl': 0,
                'winning_positions': 0,
                'losing_positions': 0,
                'win_rate': 0,
                'avg_profit': 0,
                'max_profit': 0,
                'max_loss': 0
            }
        
        # T√≠nh P&L cho t·ª´ng v·ªã th·∫ø (gi·∫£ s·ª≠ c√≥ current_price)
        positions_df['current_pnl'] = 0.0  # Placeholder
        
        total_positions = len(positions_df)
        total_pnl = positions_df['current_pnl'].sum()
        winning_positions = len(positions_df[positions_df['current_pnl'] > 0])
        losing_positions = len(positions_df[positions_df['current_pnl'] < 0])
        win_rate = (winning_positions / total_positions * 100) if total_positions > 0 else 0
        avg_profit = positions_df['current_pnl'].mean()
        max_profit = positions_df['current_pnl'].max()
        max_loss = positions_df['current_pnl'].min()
        
        return {
            'total_positions': total_positions,
            'total_pnl': total_pnl,
            'winning_positions': winning_positions,
            'losing_positions': losing_positions,
            'win_rate': win_rate,
            'avg_profit': avg_profit,
            'max_profit': max_profit,
            'max_loss': max_loss
        }
    
    def create_equity_curve(self, trades_df):
        """T·∫°o bi·ªÉu ƒë·ªì ƒë∆∞·ªùng cong v·ªën"""
        if trades_df.empty:
            return go.Figure()
        
        # Gi·∫£ s·ª≠ c√≥ c·ªôt 'profit' trong trades_df
        if 'profit' in trades_df.columns:
            cumulative_profit = trades_df['profit'].cumsum()
        else:
            # T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p
            cumulative_profit = np.cumsum(np.random.normal(0, 10, len(trades_df)))
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=trades_df.index,
            y=cumulative_profit,
            mode='lines',
            name='Equity Curve',
            line=dict(color='#1f77b4', width=2)
        ))
        
        fig.update_layout(
            title='ƒê∆∞·ªùng Cong V·ªën (Equity Curve)',
            xaxis_title='Th·ªùi Gian',
            yaxis_title='L·ª£i Nhu·∫≠n T√≠ch L≈©y',
            hovermode='x unified'
        )
        
        return fig
    
    def create_pnl_distribution(self, trades_df):
        """T·∫°o bi·ªÉu ƒë·ªì ph√¢n ph·ªëi P&L"""
        if trades_df.empty:
            return go.Figure()
        
        # Gi·∫£ s·ª≠ c√≥ c·ªôt 'profit' trong trades_df
        if 'profit' in trades_df.columns:
            profits = trades_df['profit']
        else:
            # T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p
            profits = np.random.normal(0, 10, 100)
        
        fig = go.Figure()
        fig.add_trace(go.Histogram(
            x=profits,
            nbinsx=30,
            name='Ph√¢n Ph·ªëi P&L',
            marker_color='#1f77b4'
        ))
        
        fig.update_layout(
            title='Ph√¢n Ph·ªëi L·ª£i Nhu·∫≠n/Thua L·ªó',
            xaxis_title='P&L',
            yaxis_title='S·ªë L∆∞·ª£ng Giao D·ªãch',
            bargap=0.1
        )
        
        return fig
    
    def create_symbol_performance(self, trades_df):
        """T·∫°o bi·ªÉu ƒë·ªì hi·ªáu su·∫•t theo symbol"""
        if trades_df.empty:
            return go.Figure()
        
        # Gi·∫£ s·ª≠ c√≥ c·ªôt 'symbol' v√† 'profit' trong trades_df
        if 'symbol' in trades_df.columns and 'profit' in trades_df.columns:
            symbol_performance = trades_df.groupby('symbol')['profit'].sum().sort_values(ascending=True)
        else:
            # T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p
            symbols = ['BTCUSD', 'ETHUSD', 'XAUUSD', 'SPX500', 'EURUSD']
            symbol_performance = pd.Series(
                np.random.normal(0, 50, len(symbols)),
                index=symbols
            )
        
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=symbol_performance.values,
            y=symbol_performance.index,
            orientation='h',
            name='P&L theo Symbol',
            marker_color=['#00ff00' if x > 0 else '#ff0000' for x in symbol_performance.values]
        ))
        
        fig.update_layout(
            title='Hi·ªáu Su·∫•t Giao D·ªãch Theo Symbol',
            xaxis_title='T·ªïng P&L',
            yaxis_title='Symbol',
            height=400
        )
        
        return fig
    
    def run_dashboard(self):
        """Ch·∫°y dashboard ch√≠nh"""
        # Header
        st.markdown('<h1 class="main-header">üìä Trading Bot Dashboard</h1>', unsafe_allow_html=True)
        
        # Sidebar
        st.sidebar.title("‚öôÔ∏è C√†i ƒê·∫∑t")
        
        # Auto refresh
        auto_refresh = st.sidebar.checkbox("üîÑ T·ª± ƒë·ªông l√†m m·ªõi", value=True)
        refresh_interval = st.sidebar.slider("‚è±Ô∏è Kho·∫£ng th·ªùi gian (gi√¢y)", 5, 60, 30)
        
        if auto_refresh:
            time.sleep(refresh_interval)
            st.rerun()
        
        # T·∫£i d·ªØ li·ªáu
        with st.spinner("üîÑ ƒêang t·∫£i d·ªØ li·ªáu..."):
            positions_df = self.load_open_positions()
            trades_df = self.load_trading_history()
            feature_stats = self.load_feature_store_stats()
        
        # T√≠nh to√°n metrics
        position_metrics = self.calculate_position_metrics(positions_df)
        
        # === PH·∫¶N 1: T·ªîNG QUAN ===
        st.header("üìà T·ªïng Quan Hi·ªáu Su·∫•t")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="üí∞ T·ªïng P&L",
                value=f"{position_metrics['total_pnl']:.2f}",
                delta=f"{position_metrics['total_pnl']:.2f}"
            )
        
        with col2:
            st.metric(
                label="üéØ T·ª∑ L·ªá Th·∫Øng",
                value=f"{position_metrics['win_rate']:.1f}%",
                delta=f"{position_metrics['win_rate']:.1f}%"
            )
        
        with col3:
            st.metric(
                label="üìä T·ªïng V·ªã Th·∫ø",
                value=position_metrics['total_positions'],
                delta=position_metrics['total_positions']
            )
        
        with col4:
            st.metric(
                label="üìà L·ª£i Nhu·∫≠n TB",
                value=f"{position_metrics['avg_profit']:.2f}",
                delta=f"{position_metrics['avg_profit']:.2f}"
            )
        
        # === PH·∫¶N 2: V·ªä TH·∫æ ƒêANG M·ªû ===
        st.header("üîç V·ªã Th·∫ø ƒêang M·ªü")
        
        if not positions_df.empty:
            # Hi·ªÉn th·ªã b·∫£ng v·ªã th·∫ø
            st.dataframe(
                positions_df,
                use_container_width=True,
                height=400
            )
            
            # Th·ªëng k√™ v·ªã th·∫ø
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("‚úÖ V·ªã Th·∫ø Th·∫Øng", position_metrics['winning_positions'])
            
            with col2:
                st.metric("‚ùå V·ªã Th·∫ø Thua", position_metrics['losing_positions'])
            
            with col3:
                st.metric("üìä T·ª∑ L·ªá Th·∫Øng", f"{position_metrics['win_rate']:.1f}%")
        else:
            st.info("‚ÑπÔ∏è Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü")
        
        # === PH·∫¶N 3: BI·ªÇU ƒê·ªí HI·ªÜU SU·∫§T ===
        st.header("üìä Bi·ªÉu ƒê·ªì Hi·ªáu Su·∫•t")
        
        if not trades_df.empty:
            col1, col2 = st.columns(2)
            
            with col1:
                equity_fig = self.create_equity_curve(trades_df)
                st.plotly_chart(equity_fig, use_container_width=True)
            
            with col2:
                pnl_fig = self.create_pnl_distribution(trades_df)
                st.plotly_chart(pnl_fig, use_container_width=True)
            
            # Bi·ªÉu ƒë·ªì hi·ªáu su·∫•t theo symbol
            symbol_fig = self.create_symbol_performance(trades_df)
            st.plotly_chart(symbol_fig, use_container_width=True)
        else:
            st.info("‚ÑπÔ∏è Ch∆∞a c√≥ d·ªØ li·ªáu giao d·ªãch ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì")
        
        # === PH·∫¶N 4: TH·ªêNG K√ä FEATURE STORE ===
        st.header("üóÑÔ∏è Th·ªëng K√™ Feature Store")
        
        if feature_stats:
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("üìä T·ªïng Records", feature_stats['total_records'])
            
            with col2:
                st.metric("üè∑Ô∏è S·ªë Symbols", feature_stats['total_symbols'])
            
            with col3:
                st.metric("üîß S·ªë Features", feature_stats['total_features'])
            
            with col4:
                if feature_stats['latest_timestamp']:
                    latest_time = datetime.fromisoformat(feature_stats['latest_timestamp'])
                    st.metric("‚è∞ C·∫≠p Nh·∫≠t Cu·ªëi", latest_time.strftime("%H:%M:%S"))
                else:
                    st.metric("‚è∞ C·∫≠p Nh·∫≠t Cu·ªëi", "N/A")
        else:
            st.info("‚ÑπÔ∏è Feature Store ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
        
        # === PH·∫¶N 5: L·ªäCH S·ª¨ GIAO D·ªäCH ===
        st.header("üìã L·ªãch S·ª≠ Giao D·ªãch")
        
        if not trades_df.empty:
            # L·ªçc d·ªØ li·ªáu
            st.subheader("üîç B·ªô L·ªçc")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if 'symbol' in trades_df.columns:
                    symbols = ['T·∫•t c·∫£'] + list(trades_df['symbol'].unique())
                    selected_symbol = st.selectbox("Symbol", symbols)
                    if selected_symbol != 'T·∫•t c·∫£':
                        trades_df = trades_df[trades_df['symbol'] == selected_symbol]
            
            with col2:
                if 'timestamp' in trades_df.columns:
                    date_range = st.date_input(
                        "Kho·∫£ng th·ªùi gian",
                        value=(datetime.now() - timedelta(days=7), datetime.now()),
                        max_value=datetime.now()
                    )
            
            with col3:
                limit = st.slider("S·ªë l∆∞·ª£ng giao d·ªãch", 10, 1000, 100)
            
            # Hi·ªÉn th·ªã b·∫£ng
            st.dataframe(
                trades_df.head(limit),
                use_container_width=True,
                height=400
            )
        else:
            st.info("‚ÑπÔ∏è Ch∆∞a c√≥ l·ªãch s·ª≠ giao d·ªãch")
        
        # === PH·∫¶N 6: TH√îNG TIN H·ªÜ TH·ªêNG ===
        st.header("‚öôÔ∏è Th√¥ng Tin H·ªá Th·ªëng")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.subheader("üìÅ Files")
            files_status = {
                "V·ªã th·∫ø m·ªü": "‚úÖ" if os.path.exists(self.positions_file) else "‚ùå",
                "Database": "‚úÖ" if os.path.exists(self.db_file) else "‚ùå",
                "Feature Store": "‚úÖ" if os.path.exists(self.feature_store_file) else "‚ùå"
            }
            
            for file_name, status in files_status.items():
                st.write(f"{status} {file_name}")
        
        with col2:
            st.subheader("üïê Th·ªùi Gian")
            current_time = datetime.now()
            st.write(f"**Hi·ªán t·∫°i:** {current_time.strftime('%Y-%m-%d %H:%M:%S')}")
            st.write(f"**Timezone:** {current_time.astimezone().tzinfo}")
        
        with col3:
            st.subheader("üìä Tr·∫°ng Th√°i")
            st.write(f"**Auto Refresh:** {'üü¢ B·∫≠t' if auto_refresh else 'üî¥ T·∫Øt'}")
            st.write(f"**Interval:** {refresh_interval}s")
            st.write(f"**Last Update:** {current_time.strftime('%H:%M:%S')}")
        
        # Footer
        st.markdown("---")
        st.markdown(
            "<div style='text-align: center; color: #666;'>"
            "ü§ñ Trading Bot Dashboard - Powered by Streamlit"
            "</div>",
            unsafe_allow_html=True
        )

def main():
    """H√†m ch√≠nh"""
    try:
        dashboard = TradingDashboard()
        dashboard.run_dashboard()
    except Exception as e:
        st.error(f"‚ùå L·ªói ch·∫°y dashboard: {e}")
        st.exception(e)

if __name__ == "__main__":
    main()